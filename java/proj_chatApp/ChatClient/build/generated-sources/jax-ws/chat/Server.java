
package chat;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Server", targetNamespace = "http://server.chat/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Server {


    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "join", targetNamespace = "http://server.chat/", className = "chat.Join")
    @ResponseWrapper(localName = "joinResponse", targetNamespace = "http://server.chat/", className = "chat.JoinResponse")
    @Action(input = "http://server.chat/Server/joinRequest", output = "http://server.chat/Server/joinResponse")
    public boolean join(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<chat.Message>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listen", targetNamespace = "http://server.chat/", className = "chat.Listen")
    @ResponseWrapper(localName = "listenResponse", targetNamespace = "http://server.chat/", className = "chat.ListenResponse")
    @Action(input = "http://server.chat/Server/listenRequest", output = "http://server.chat/Server/listenResponse")
    public List<Message> listen(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "broadcast", targetNamespace = "http://server.chat/", className = "chat.Broadcast")
    @ResponseWrapper(localName = "broadcastResponse", targetNamespace = "http://server.chat/", className = "chat.BroadcastResponse")
    @Action(input = "http://server.chat/Server/broadcastRequest", output = "http://server.chat/Server/broadcastResponse")
    public boolean broadcast(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        byte[] arg2);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<chat.User>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "connectedUsers", targetNamespace = "http://server.chat/", className = "chat.ConnectedUsers")
    @ResponseWrapper(localName = "connectedUsersResponse", targetNamespace = "http://server.chat/", className = "chat.ConnectedUsersResponse")
    @Action(input = "http://server.chat/Server/connectedUsersRequest", output = "http://server.chat/Server/connectedUsersResponse")
    public List<User> connectedUsers(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "privateMessage", targetNamespace = "http://server.chat/", className = "chat.PrivateMessage")
    @ResponseWrapper(localName = "privateMessageResponse", targetNamespace = "http://server.chat/", className = "chat.PrivateMessageResponse")
    @Action(input = "http://server.chat/Server/privateMessageRequest", output = "http://server.chat/Server/privateMessageResponse")
    public boolean privateMessage(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        byte[] arg3);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "adminLogoff", targetNamespace = "http://server.chat/", className = "chat.AdminLogoff")
    @ResponseWrapper(localName = "adminLogoffResponse", targetNamespace = "http://server.chat/", className = "chat.AdminLogoffResponse")
    @Action(input = "http://server.chat/Server/adminLogoffRequest", output = "http://server.chat/Server/adminLogoffResponse")
    public boolean adminLogoff(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "adminLogon", targetNamespace = "http://server.chat/", className = "chat.AdminLogon")
    @ResponseWrapper(localName = "adminLogonResponse", targetNamespace = "http://server.chat/", className = "chat.AdminLogonResponse")
    @Action(input = "http://server.chat/Server/adminLogonRequest", output = "http://server.chat/Server/adminLogonResponse")
    public boolean adminLogon(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "leave", targetNamespace = "http://server.chat/", className = "chat.Leave")
    @ResponseWrapper(localName = "leaveResponse", targetNamespace = "http://server.chat/", className = "chat.LeaveResponse")
    @Action(input = "http://server.chat/Server/leaveRequest", output = "http://server.chat/Server/leaveResponse")
    public void leave(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

}
